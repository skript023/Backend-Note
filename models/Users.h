/**
 *
 *  Users.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace remote_binary
{

class Users
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _level;
        static const std::string _ownership_id;
        static const std::string _role_id;
        static const std::string _fullname;
        static const std::string _username;
        static const std::string _email;
        static const std::string _password;
        static const std::string _hardware_uuid;
        static const std::string _computer_name;
        static const std::string _activity;
        static const std::string _status;
        static const std::string _image;
        static const std::string _expired;
        static const std::string _created_date;
        static const std::string _recent_login;
        static const std::string _email_verified_at;
        static const std::string _remember_token;
        static const std::string _created_at;
        static const std::string _updated_at;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = uint64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Users(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Users(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Users(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Users() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const uint64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getId() const noexcept;
    ///Set the value of the column id
    void setId(const uint64_t &pId) noexcept;

    /**  For column level  */
    ///Get the value of the column level, returns the default value if the column is null
    const uint64_t &getValueOfLevel() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getLevel() const noexcept;
    ///Set the value of the column level
    void setLevel(const uint64_t &pLevel) noexcept;
    void setLevelToNull() noexcept;

    /**  For column ownership_id  */
    ///Get the value of the column ownership_id, returns the default value if the column is null
    const uint64_t &getValueOfOwnershipId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getOwnershipId() const noexcept;
    ///Set the value of the column ownership_id
    void setOwnershipId(const uint64_t &pOwnershipId) noexcept;
    void setOwnershipIdToNull() noexcept;

    /**  For column role_id  */
    ///Get the value of the column role_id, returns the default value if the column is null
    const uint64_t &getValueOfRoleId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getRoleId() const noexcept;
    ///Set the value of the column role_id
    void setRoleId(const uint64_t &pRoleId) noexcept;
    void setRoleIdToNull() noexcept;

    /**  For column fullname  */
    ///Get the value of the column fullname, returns the default value if the column is null
    const std::string &getValueOfFullname() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFullname() const noexcept;
    ///Set the value of the column fullname
    void setFullname(const std::string &pFullname) noexcept;
    void setFullname(std::string &&pFullname) noexcept;

    /**  For column username  */
    ///Get the value of the column username, returns the default value if the column is null
    const std::string &getValueOfUsername() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getUsername() const noexcept;
    ///Set the value of the column username
    void setUsername(const std::string &pUsername) noexcept;
    void setUsername(std::string &&pUsername) noexcept;

    /**  For column email  */
    ///Get the value of the column email, returns the default value if the column is null
    const std::string &getValueOfEmail() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEmail() const noexcept;
    ///Set the value of the column email
    void setEmail(const std::string &pEmail) noexcept;
    void setEmail(std::string &&pEmail) noexcept;

    /**  For column password  */
    ///Get the value of the column password, returns the default value if the column is null
    const std::string &getValueOfPassword() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPassword() const noexcept;
    ///Set the value of the column password
    void setPassword(const std::string &pPassword) noexcept;
    void setPassword(std::string &&pPassword) noexcept;

    /**  For column hardware_uuid  */
    ///Get the value of the column hardware_uuid, returns the default value if the column is null
    const std::string &getValueOfHardwareUuid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getHardwareUuid() const noexcept;
    ///Set the value of the column hardware_uuid
    void setHardwareUuid(const std::string &pHardwareUuid) noexcept;
    void setHardwareUuid(std::string &&pHardwareUuid) noexcept;
    void setHardwareUuidToNull() noexcept;

    /**  For column computer_name  */
    ///Get the value of the column computer_name, returns the default value if the column is null
    const std::string &getValueOfComputerName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getComputerName() const noexcept;
    ///Set the value of the column computer_name
    void setComputerName(const std::string &pComputerName) noexcept;
    void setComputerName(std::string &&pComputerName) noexcept;
    void setComputerNameToNull() noexcept;

    /**  For column activity  */
    ///Get the value of the column activity, returns the default value if the column is null
    const std::string &getValueOfActivity() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getActivity() const noexcept;
    ///Set the value of the column activity
    void setActivity(const std::string &pActivity) noexcept;
    void setActivity(std::string &&pActivity) noexcept;

    /**  For column status  */
    ///Get the value of the column status, returns the default value if the column is null
    const std::string &getValueOfStatus() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getStatus() const noexcept;
    ///Set the value of the column status
    void setStatus(const std::string &pStatus) noexcept;
    void setStatus(std::string &&pStatus) noexcept;

    /**  For column image  */
    ///Get the value of the column image, returns the default value if the column is null
    const std::string &getValueOfImage() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getImage() const noexcept;
    ///Set the value of the column image
    void setImage(const std::string &pImage) noexcept;
    void setImage(std::string &&pImage) noexcept;
    void setImageToNull() noexcept;

    /**  For column expired  */
    ///Get the value of the column expired, returns the default value if the column is null
    const ::trantor::Date &getValueOfExpired() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getExpired() const noexcept;
    ///Set the value of the column expired
    void setExpired(const ::trantor::Date &pExpired) noexcept;

    /**  For column created_date  */
    ///Get the value of the column created_date, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedDate() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedDate() const noexcept;
    ///Set the value of the column created_date
    void setCreatedDate(const ::trantor::Date &pCreatedDate) noexcept;

    /**  For column recent_login  */
    ///Get the value of the column recent_login, returns the default value if the column is null
    const ::trantor::Date &getValueOfRecentLogin() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getRecentLogin() const noexcept;
    ///Set the value of the column recent_login
    void setRecentLogin(const ::trantor::Date &pRecentLogin) noexcept;

    /**  For column email_verified_at  */
    ///Get the value of the column email_verified_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfEmailVerifiedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getEmailVerifiedAt() const noexcept;
    ///Set the value of the column email_verified_at
    void setEmailVerifiedAt(const ::trantor::Date &pEmailVerifiedAt) noexcept;
    void setEmailVerifiedAtToNull() noexcept;

    /**  For column remember_token  */
    ///Get the value of the column remember_token, returns the default value if the column is null
    const std::string &getValueOfRememberToken() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getRememberToken() const noexcept;
    ///Set the value of the column remember_token
    void setRememberToken(const std::string &pRememberToken) noexcept;
    void setRememberToken(std::string &&pRememberToken) noexcept;
    void setRememberTokenToNull() noexcept;

    /**  For column created_at  */
    ///Get the value of the column created_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedAt() const noexcept;
    ///Set the value of the column created_at
    void setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept;
    void setCreatedAtToNull() noexcept;

    /**  For column updated_at  */
    ///Get the value of the column updated_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdatedAt() const noexcept;
    ///Set the value of the column updated_at
    void setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept;
    void setUpdatedAtToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 20;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Users>;
    friend drogon::orm::BaseBuilder<Users, true, true>;
    friend drogon::orm::BaseBuilder<Users, true, false>;
    friend drogon::orm::BaseBuilder<Users, false, true>;
    friend drogon::orm::BaseBuilder<Users, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Users>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint64_t> id_;
    std::shared_ptr<uint64_t> level_;
    std::shared_ptr<uint64_t> ownershipId_;
    std::shared_ptr<uint64_t> roleId_;
    std::shared_ptr<std::string> fullname_;
    std::shared_ptr<std::string> username_;
    std::shared_ptr<std::string> email_;
    std::shared_ptr<std::string> password_;
    std::shared_ptr<std::string> hardwareUuid_;
    std::shared_ptr<std::string> computerName_;
    std::shared_ptr<std::string> activity_;
    std::shared_ptr<std::string> status_;
    std::shared_ptr<std::string> image_;
    std::shared_ptr<::trantor::Date> expired_;
    std::shared_ptr<::trantor::Date> createdDate_;
    std::shared_ptr<::trantor::Date> recentLogin_;
    std::shared_ptr<::trantor::Date> emailVerifiedAt_;
    std::shared_ptr<std::string> rememberToken_;
    std::shared_ptr<::trantor::Date> createdAt_;
    std::shared_ptr<::trantor::Date> updatedAt_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[20]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "level,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "ownership_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "role_id,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "fullname,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "username,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "email,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "password,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "hardware_uuid,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "computer_name,";
            ++parametersCount;
        }
        sql += "activity,";
        ++parametersCount;
        if(!dirtyFlag_[10])
        {
            needSelection=true;
        }
        sql += "status,";
        ++parametersCount;
        if(!dirtyFlag_[11])
        {
            needSelection=true;
        }
        if(dirtyFlag_[12])
        {
            sql += "image,";
            ++parametersCount;
        }
        sql += "expired,";
        ++parametersCount;
        if(!dirtyFlag_[13])
        {
            needSelection=true;
        }
        sql += "created_date,";
        ++parametersCount;
        if(!dirtyFlag_[14])
        {
            needSelection=true;
        }
        sql += "recent_login,";
        ++parametersCount;
        if(!dirtyFlag_[15])
        {
            needSelection=true;
        }
        if(dirtyFlag_[16])
        {
            sql += "email_verified_at,";
            ++parametersCount;
        }
        if(dirtyFlag_[17])
        {
            sql += "remember_token,";
            ++parametersCount;
        }
        if(dirtyFlag_[18])
        {
            sql += "created_at,";
            ++parametersCount;
        }
        if(dirtyFlag_[19])
        {
            sql += "updated_at,";
            ++parametersCount;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[15])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[16])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[17])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[18])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[19])
        {
            sql.append("?,");

        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace remote_binary
} // namespace drogon_model
