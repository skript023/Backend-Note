/**
 *
 *  Binaries.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace remote_binary
{

class Binaries
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _game;
        static const std::string _code;
        static const std::string _file;
        static const std::string _target;
        static const std::string _version;
        static const std::string _version_machine;
        static const std::string _ownership_id;
        static const std::string _supported;
        static const std::string _valid;
        static const std::string _created_at;
        static const std::string _updated_at;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = uint64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Binaries(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Binaries(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Binaries(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Binaries() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const uint64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getId() const noexcept;
    ///Set the value of the column id
    void setId(const uint64_t &pId) noexcept;

    /**  For column game  */
    ///Get the value of the column game, returns the default value if the column is null
    const std::string &getValueOfGame() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getGame() const noexcept;
    ///Set the value of the column game
    void setGame(const std::string &pGame) noexcept;
    void setGame(std::string &&pGame) noexcept;

    /**  For column code  */
    ///Get the value of the column code, returns the default value if the column is null
    const uint32_t &getValueOfCode() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getCode() const noexcept;
    ///Set the value of the column code
    void setCode(const uint32_t &pCode) noexcept;
    void setCodeToNull() noexcept;

    /**  For column file  */
    ///Get the value of the column file, returns the default value if the column is null
    const std::string &getValueOfFile() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFile() const noexcept;
    ///Set the value of the column file
    void setFile(const std::string &pFile) noexcept;
    void setFile(std::string &&pFile) noexcept;

    /**  For column target  */
    ///Get the value of the column target, returns the default value if the column is null
    const std::string &getValueOfTarget() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTarget() const noexcept;
    ///Set the value of the column target
    void setTarget(const std::string &pTarget) noexcept;
    void setTarget(std::string &&pTarget) noexcept;

    /**  For column version  */
    ///Get the value of the column version, returns the default value if the column is null
    const std::string &getValueOfVersion() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getVersion() const noexcept;
    ///Set the value of the column version
    void setVersion(const std::string &pVersion) noexcept;
    void setVersion(std::string &&pVersion) noexcept;

    /**  For column version_machine  */
    ///Get the value of the column version_machine, returns the default value if the column is null
    const int32_t &getValueOfVersionMachine() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int32_t> &getVersionMachine() const noexcept;
    ///Set the value of the column version_machine
    void setVersionMachine(const int32_t &pVersionMachine) noexcept;

    /**  For column ownership_id  */
    ///Get the value of the column ownership_id, returns the default value if the column is null
    const uint64_t &getValueOfOwnershipId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getOwnershipId() const noexcept;
    ///Set the value of the column ownership_id
    void setOwnershipId(const uint64_t &pOwnershipId) noexcept;

    /**  For column supported  */
    ///Get the value of the column supported, returns the default value if the column is null
    const int8_t &getValueOfSupported() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getSupported() const noexcept;
    ///Set the value of the column supported
    void setSupported(const int8_t &pSupported) noexcept;

    /**  For column valid  */
    ///Get the value of the column valid, returns the default value if the column is null
    const int8_t &getValueOfValid() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<int8_t> &getValid() const noexcept;
    ///Set the value of the column valid
    void setValid(const int8_t &pValid) noexcept;

    /**  For column created_at  */
    ///Get the value of the column created_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfCreatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getCreatedAt() const noexcept;
    ///Set the value of the column created_at
    void setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept;
    void setCreatedAtToNull() noexcept;

    /**  For column updated_at  */
    ///Get the value of the column updated_at, returns the default value if the column is null
    const ::trantor::Date &getValueOfUpdatedAt() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<::trantor::Date> &getUpdatedAt() const noexcept;
    ///Set the value of the column updated_at
    void setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept;
    void setUpdatedAtToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 12;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Binaries>;
    friend drogon::orm::BaseBuilder<Binaries, true, true>;
    friend drogon::orm::BaseBuilder<Binaries, true, false>;
    friend drogon::orm::BaseBuilder<Binaries, false, true>;
    friend drogon::orm::BaseBuilder<Binaries, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Binaries>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint64_t> id_;
    std::shared_ptr<std::string> game_;
    std::shared_ptr<uint32_t> code_;
    std::shared_ptr<std::string> file_;
    std::shared_ptr<std::string> target_;
    std::shared_ptr<std::string> version_;
    std::shared_ptr<int32_t> versionMachine_;
    std::shared_ptr<uint64_t> ownershipId_;
    std::shared_ptr<int8_t> supported_;
    std::shared_ptr<int8_t> valid_;
    std::shared_ptr<::trantor::Date> createdAt_;
    std::shared_ptr<::trantor::Date> updatedAt_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[12]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "game,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "code,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "file,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "target,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "version,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "version_machine,";
            ++parametersCount;
        }
        sql += "ownership_id,";
        ++parametersCount;
        if(!dirtyFlag_[7])
        {
            needSelection=true;
        }
        if(dirtyFlag_[8])
        {
            sql += "supported,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "valid,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "created_at,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "updated_at,";
            ++parametersCount;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        else
        {
            sql +="default,";
        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace remote_binary
} // namespace drogon_model
