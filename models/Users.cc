/**
 *
 *  Users.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Users.h"
#include "Activities.h"
#include "Roles.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::remote_binary;

const std::string Users::Cols::_id = "id";
const std::string Users::Cols::_level = "level";
const std::string Users::Cols::_ownership_id = "ownership_id";
const std::string Users::Cols::_role_id = "role_id";
const std::string Users::Cols::_fullname = "fullname";
const std::string Users::Cols::_username = "username";
const std::string Users::Cols::_email = "email";
const std::string Users::Cols::_password = "password";
const std::string Users::Cols::_hardware_uuid = "hardware_uuid";
const std::string Users::Cols::_computer_name = "computer_name";
const std::string Users::Cols::_activity = "activity";
const std::string Users::Cols::_status = "status";
const std::string Users::Cols::_image = "image";
const std::string Users::Cols::_expired = "expired";
const std::string Users::Cols::_created_date = "created_date";
const std::string Users::Cols::_recent_login = "recent_login";
const std::string Users::Cols::_email_verified_at = "email_verified_at";
const std::string Users::Cols::_remember_token = "remember_token";
const std::string Users::Cols::_created_at = "created_at";
const std::string Users::Cols::_updated_at = "updated_at";
const std::string Users::primaryKeyName = "id";
const bool Users::hasPrimaryKey = true;
const std::string Users::tableName = "users";

const std::vector<typename Users::MetaData> Users::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"level","uint64_t","bigint(20) unsigned",8,0,0,0},
{"ownership_id","uint64_t","bigint(20) unsigned",8,0,0,0},
{"role_id","uint64_t","bigint(20) unsigned",8,0,0,0},
{"fullname","std::string","varchar(255)",255,0,0,1},
{"username","std::string","varchar(255)",255,0,0,1},
{"email","std::string","varchar(255)",255,0,0,1},
{"password","std::string","varchar(255)",255,0,0,1},
{"hardware_uuid","std::string","varchar(255)",255,0,0,0},
{"computer_name","std::string","varchar(255)",255,0,0,0},
{"activity","std::string","varchar(255)",255,0,0,1},
{"status","std::string","varchar(255)",255,0,0,1},
{"image","std::string","varchar(255)",255,0,0,0},
{"expired","::trantor::Date","date",0,0,0,1},
{"created_date","::trantor::Date","date",0,0,0,1},
{"recent_login","::trantor::Date","timestamp",0,0,0,1},
{"email_verified_at","::trantor::Date","timestamp",0,0,0,0},
{"remember_token","std::string","varchar(100)",100,0,0,0},
{"created_at","::trantor::Date","timestamp",0,0,0,0},
{"updated_at","::trantor::Date","timestamp",0,0,0,0}
};
const std::string &Users::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Users::Users(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["level"].isNull())
        {
            level_=std::make_shared<uint64_t>(r["level"].as<uint64_t>());
        }
        if(!r["ownership_id"].isNull())
        {
            ownershipId_=std::make_shared<uint64_t>(r["ownership_id"].as<uint64_t>());
        }
        if(!r["role_id"].isNull())
        {
            roleId_=std::make_shared<uint64_t>(r["role_id"].as<uint64_t>());
        }
        if(!r["fullname"].isNull())
        {
            fullname_=std::make_shared<std::string>(r["fullname"].as<std::string>());
        }
        if(!r["username"].isNull())
        {
            username_=std::make_shared<std::string>(r["username"].as<std::string>());
        }
        if(!r["email"].isNull())
        {
            email_=std::make_shared<std::string>(r["email"].as<std::string>());
        }
        if(!r["password"].isNull())
        {
            password_=std::make_shared<std::string>(r["password"].as<std::string>());
        }
        if(!r["hardware_uuid"].isNull())
        {
            hardwareUuid_=std::make_shared<std::string>(r["hardware_uuid"].as<std::string>());
        }
        if(!r["computer_name"].isNull())
        {
            computerName_=std::make_shared<std::string>(r["computer_name"].as<std::string>());
        }
        if(!r["activity"].isNull())
        {
            activity_=std::make_shared<std::string>(r["activity"].as<std::string>());
        }
        if(!r["status"].isNull())
        {
            status_=std::make_shared<std::string>(r["status"].as<std::string>());
        }
        if(!r["image"].isNull())
        {
            image_=std::make_shared<std::string>(r["image"].as<std::string>());
        }
        if(!r["expired"].isNull())
        {
            auto daysStr = r["expired"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            expired_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["created_date"].isNull())
        {
            auto daysStr = r["created_date"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            createdDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
        if(!r["recent_login"].isNull())
        {
            auto timeStr = r["recent_login"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                recentLogin_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["email_verified_at"].isNull())
        {
            auto timeStr = r["email_verified_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                emailVerifiedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["remember_token"].isNull())
        {
            rememberToken_=std::make_shared<std::string>(r["remember_token"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 20 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            level_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            ownershipId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            roleId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            fullname_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            username_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            email_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            password_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            hardwareUuid_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            computerName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            activity_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            status_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            image_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            expired_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            auto daysStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            createdDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                recentLogin_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                emailVerifiedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            rememberToken_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

Users::Users(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 20)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            level_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            ownershipId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            roleId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            fullname_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            username_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            password_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            hardwareUuid_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            computerName_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            activity_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            image_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[13]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            expired_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[14]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            createdDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[15]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                recentLogin_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[16]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                emailVerifiedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            rememberToken_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[18]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[19]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

Users::Users(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("level"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["level"].isNull())
        {
            level_=std::make_shared<uint64_t>((uint64_t)pJson["level"].asUInt64());
        }
    }
    if(pJson.isMember("ownership_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["ownership_id"].isNull())
        {
            ownershipId_=std::make_shared<uint64_t>((uint64_t)pJson["ownership_id"].asUInt64());
        }
    }
    if(pJson.isMember("role_id"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["role_id"].isNull())
        {
            roleId_=std::make_shared<uint64_t>((uint64_t)pJson["role_id"].asUInt64());
        }
    }
    if(pJson.isMember("fullname"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["fullname"].isNull())
        {
            fullname_=std::make_shared<std::string>(pJson["fullname"].asString());
        }
    }
    if(pJson.isMember("username"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["username"].isNull())
        {
            username_=std::make_shared<std::string>(pJson["username"].asString());
        }
    }
    if(pJson.isMember("email"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["email"].asString());
        }
    }
    if(pJson.isMember("password"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["password"].isNull())
        {
            password_=std::make_shared<std::string>(pJson["password"].asString());
        }
    }
    if(pJson.isMember("hardware_uuid"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["hardware_uuid"].isNull())
        {
            hardwareUuid_=std::make_shared<std::string>(pJson["hardware_uuid"].asString());
        }
    }
    if(pJson.isMember("computer_name"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["computer_name"].isNull())
        {
            computerName_=std::make_shared<std::string>(pJson["computer_name"].asString());
        }
    }
    if(pJson.isMember("activity"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["activity"].isNull())
        {
            activity_=std::make_shared<std::string>(pJson["activity"].asString());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["status"].asString());
        }
    }
    if(pJson.isMember("image"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["image"].isNull())
        {
            image_=std::make_shared<std::string>(pJson["image"].asString());
        }
    }
    if(pJson.isMember("expired"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["expired"].isNull())
        {
            auto daysStr = pJson["expired"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            expired_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("created_date"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["created_date"].isNull())
        {
            auto daysStr = pJson["created_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            createdDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("recent_login"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["recent_login"].isNull())
        {
            auto timeStr = pJson["recent_login"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                recentLogin_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("email_verified_at"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["email_verified_at"].isNull())
        {
            auto timeStr = pJson["email_verified_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                emailVerifiedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("remember_token"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["remember_token"].isNull())
        {
            rememberToken_=std::make_shared<std::string>(pJson["remember_token"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updated_at"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Users::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 20)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            level_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            ownershipId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            roleId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            fullname_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            username_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            password_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            hardwareUuid_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            computerName_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            activity_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            status_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            image_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[13]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            expired_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            auto daysStr = pJson[pMasqueradingVector[14]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            createdDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[15]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                recentLogin_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[16]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                emailVerifiedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            rememberToken_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[18]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[19]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Users::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("level"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["level"].isNull())
        {
            level_=std::make_shared<uint64_t>((uint64_t)pJson["level"].asUInt64());
        }
    }
    if(pJson.isMember("ownership_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["ownership_id"].isNull())
        {
            ownershipId_=std::make_shared<uint64_t>((uint64_t)pJson["ownership_id"].asUInt64());
        }
    }
    if(pJson.isMember("role_id"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["role_id"].isNull())
        {
            roleId_=std::make_shared<uint64_t>((uint64_t)pJson["role_id"].asUInt64());
        }
    }
    if(pJson.isMember("fullname"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["fullname"].isNull())
        {
            fullname_=std::make_shared<std::string>(pJson["fullname"].asString());
        }
    }
    if(pJson.isMember("username"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["username"].isNull())
        {
            username_=std::make_shared<std::string>(pJson["username"].asString());
        }
    }
    if(pJson.isMember("email"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["email"].asString());
        }
    }
    if(pJson.isMember("password"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["password"].isNull())
        {
            password_=std::make_shared<std::string>(pJson["password"].asString());
        }
    }
    if(pJson.isMember("hardware_uuid"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["hardware_uuid"].isNull())
        {
            hardwareUuid_=std::make_shared<std::string>(pJson["hardware_uuid"].asString());
        }
    }
    if(pJson.isMember("computer_name"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["computer_name"].isNull())
        {
            computerName_=std::make_shared<std::string>(pJson["computer_name"].asString());
        }
    }
    if(pJson.isMember("activity"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["activity"].isNull())
        {
            activity_=std::make_shared<std::string>(pJson["activity"].asString());
        }
    }
    if(pJson.isMember("status"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["status"].isNull())
        {
            status_=std::make_shared<std::string>(pJson["status"].asString());
        }
    }
    if(pJson.isMember("image"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["image"].isNull())
        {
            image_=std::make_shared<std::string>(pJson["image"].asString());
        }
    }
    if(pJson.isMember("expired"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["expired"].isNull())
        {
            auto daysStr = pJson["expired"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            expired_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("created_date"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["created_date"].isNull())
        {
            auto daysStr = pJson["created_date"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            strptime(daysStr.c_str(),"%Y-%m-%d",&stm);
            time_t t = mktime(&stm);
            createdDate_=std::make_shared<::trantor::Date>(t*1000000);
        }
    }
    if(pJson.isMember("recent_login"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["recent_login"].isNull())
        {
            auto timeStr = pJson["recent_login"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                recentLogin_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("email_verified_at"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["email_verified_at"].isNull())
        {
            auto timeStr = pJson["email_verified_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                emailVerifiedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("remember_token"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["remember_token"].isNull())
        {
            rememberToken_=std::make_shared<std::string>(pJson["remember_token"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updated_at"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const uint64_t &Users::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Users::getId() const noexcept
{
    return id_;
}
void Users::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Users::PrimaryKeyType & Users::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint64_t &Users::getValueOfLevel() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(level_)
        return *level_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Users::getLevel() const noexcept
{
    return level_;
}
void Users::setLevel(const uint64_t &pLevel) noexcept
{
    level_ = std::make_shared<uint64_t>(pLevel);
    dirtyFlag_[1] = true;
}
void Users::setLevelToNull() noexcept
{
    level_.reset();
    dirtyFlag_[1] = true;
}

const uint64_t &Users::getValueOfOwnershipId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(ownershipId_)
        return *ownershipId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Users::getOwnershipId() const noexcept
{
    return ownershipId_;
}
void Users::setOwnershipId(const uint64_t &pOwnershipId) noexcept
{
    ownershipId_ = std::make_shared<uint64_t>(pOwnershipId);
    dirtyFlag_[2] = true;
}
void Users::setOwnershipIdToNull() noexcept
{
    ownershipId_.reset();
    dirtyFlag_[2] = true;
}

const uint64_t &Users::getValueOfRoleId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(roleId_)
        return *roleId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Users::getRoleId() const noexcept
{
    return roleId_;
}
void Users::setRoleId(const uint64_t &pRoleId) noexcept
{
    roleId_ = std::make_shared<uint64_t>(pRoleId);
    dirtyFlag_[3] = true;
}
void Users::setRoleIdToNull() noexcept
{
    roleId_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Users::getValueOfFullname() const noexcept
{
    const static std::string defaultValue = std::string();
    if(fullname_)
        return *fullname_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getFullname() const noexcept
{
    return fullname_;
}
void Users::setFullname(const std::string &pFullname) noexcept
{
    fullname_ = std::make_shared<std::string>(pFullname);
    dirtyFlag_[4] = true;
}
void Users::setFullname(std::string &&pFullname) noexcept
{
    fullname_ = std::make_shared<std::string>(std::move(pFullname));
    dirtyFlag_[4] = true;
}

const std::string &Users::getValueOfUsername() const noexcept
{
    const static std::string defaultValue = std::string();
    if(username_)
        return *username_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getUsername() const noexcept
{
    return username_;
}
void Users::setUsername(const std::string &pUsername) noexcept
{
    username_ = std::make_shared<std::string>(pUsername);
    dirtyFlag_[5] = true;
}
void Users::setUsername(std::string &&pUsername) noexcept
{
    username_ = std::make_shared<std::string>(std::move(pUsername));
    dirtyFlag_[5] = true;
}

const std::string &Users::getValueOfEmail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(email_)
        return *email_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getEmail() const noexcept
{
    return email_;
}
void Users::setEmail(const std::string &pEmail) noexcept
{
    email_ = std::make_shared<std::string>(pEmail);
    dirtyFlag_[6] = true;
}
void Users::setEmail(std::string &&pEmail) noexcept
{
    email_ = std::make_shared<std::string>(std::move(pEmail));
    dirtyFlag_[6] = true;
}

const std::string &Users::getValueOfPassword() const noexcept
{
    const static std::string defaultValue = std::string();
    if(password_)
        return *password_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getPassword() const noexcept
{
    return password_;
}
void Users::setPassword(const std::string &pPassword) noexcept
{
    password_ = std::make_shared<std::string>(pPassword);
    dirtyFlag_[7] = true;
}
void Users::setPassword(std::string &&pPassword) noexcept
{
    password_ = std::make_shared<std::string>(std::move(pPassword));
    dirtyFlag_[7] = true;
}

const std::string &Users::getValueOfHardwareUuid() const noexcept
{
    const static std::string defaultValue = std::string();
    if(hardwareUuid_)
        return *hardwareUuid_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getHardwareUuid() const noexcept
{
    return hardwareUuid_;
}
void Users::setHardwareUuid(const std::string &pHardwareUuid) noexcept
{
    hardwareUuid_ = std::make_shared<std::string>(pHardwareUuid);
    dirtyFlag_[8] = true;
}
void Users::setHardwareUuid(std::string &&pHardwareUuid) noexcept
{
    hardwareUuid_ = std::make_shared<std::string>(std::move(pHardwareUuid));
    dirtyFlag_[8] = true;
}
void Users::setHardwareUuidToNull() noexcept
{
    hardwareUuid_.reset();
    dirtyFlag_[8] = true;
}

const std::string &Users::getValueOfComputerName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(computerName_)
        return *computerName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getComputerName() const noexcept
{
    return computerName_;
}
void Users::setComputerName(const std::string &pComputerName) noexcept
{
    computerName_ = std::make_shared<std::string>(pComputerName);
    dirtyFlag_[9] = true;
}
void Users::setComputerName(std::string &&pComputerName) noexcept
{
    computerName_ = std::make_shared<std::string>(std::move(pComputerName));
    dirtyFlag_[9] = true;
}
void Users::setComputerNameToNull() noexcept
{
    computerName_.reset();
    dirtyFlag_[9] = true;
}

const std::string &Users::getValueOfActivity() const noexcept
{
    const static std::string defaultValue = std::string();
    if(activity_)
        return *activity_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getActivity() const noexcept
{
    return activity_;
}
void Users::setActivity(const std::string &pActivity) noexcept
{
    activity_ = std::make_shared<std::string>(pActivity);
    dirtyFlag_[10] = true;
}
void Users::setActivity(std::string &&pActivity) noexcept
{
    activity_ = std::make_shared<std::string>(std::move(pActivity));
    dirtyFlag_[10] = true;
}

const std::string &Users::getValueOfStatus() const noexcept
{
    const static std::string defaultValue = std::string();
    if(status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getStatus() const noexcept
{
    return status_;
}
void Users::setStatus(const std::string &pStatus) noexcept
{
    status_ = std::make_shared<std::string>(pStatus);
    dirtyFlag_[11] = true;
}
void Users::setStatus(std::string &&pStatus) noexcept
{
    status_ = std::make_shared<std::string>(std::move(pStatus));
    dirtyFlag_[11] = true;
}

const std::string &Users::getValueOfImage() const noexcept
{
    const static std::string defaultValue = std::string();
    if(image_)
        return *image_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getImage() const noexcept
{
    return image_;
}
void Users::setImage(const std::string &pImage) noexcept
{
    image_ = std::make_shared<std::string>(pImage);
    dirtyFlag_[12] = true;
}
void Users::setImage(std::string &&pImage) noexcept
{
    image_ = std::make_shared<std::string>(std::move(pImage));
    dirtyFlag_[12] = true;
}
void Users::setImageToNull() noexcept
{
    image_.reset();
    dirtyFlag_[12] = true;
}

const ::trantor::Date &Users::getValueOfExpired() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(expired_)
        return *expired_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Users::getExpired() const noexcept
{
    return expired_;
}
void Users::setExpired(const ::trantor::Date &pExpired) noexcept
{
    expired_ = std::make_shared<::trantor::Date>(pExpired.roundDay());
    dirtyFlag_[13] = true;
}

const ::trantor::Date &Users::getValueOfCreatedDate() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createdDate_)
        return *createdDate_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Users::getCreatedDate() const noexcept
{
    return createdDate_;
}
void Users::setCreatedDate(const ::trantor::Date &pCreatedDate) noexcept
{
    createdDate_ = std::make_shared<::trantor::Date>(pCreatedDate.roundDay());
    dirtyFlag_[14] = true;
}

const ::trantor::Date &Users::getValueOfRecentLogin() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(recentLogin_)
        return *recentLogin_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Users::getRecentLogin() const noexcept
{
    return recentLogin_;
}
void Users::setRecentLogin(const ::trantor::Date &pRecentLogin) noexcept
{
    recentLogin_ = std::make_shared<::trantor::Date>(pRecentLogin);
    dirtyFlag_[15] = true;
}

const ::trantor::Date &Users::getValueOfEmailVerifiedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(emailVerifiedAt_)
        return *emailVerifiedAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Users::getEmailVerifiedAt() const noexcept
{
    return emailVerifiedAt_;
}
void Users::setEmailVerifiedAt(const ::trantor::Date &pEmailVerifiedAt) noexcept
{
    emailVerifiedAt_ = std::make_shared<::trantor::Date>(pEmailVerifiedAt);
    dirtyFlag_[16] = true;
}
void Users::setEmailVerifiedAtToNull() noexcept
{
    emailVerifiedAt_.reset();
    dirtyFlag_[16] = true;
}

const std::string &Users::getValueOfRememberToken() const noexcept
{
    const static std::string defaultValue = std::string();
    if(rememberToken_)
        return *rememberToken_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Users::getRememberToken() const noexcept
{
    return rememberToken_;
}
void Users::setRememberToken(const std::string &pRememberToken) noexcept
{
    rememberToken_ = std::make_shared<std::string>(pRememberToken);
    dirtyFlag_[17] = true;
}
void Users::setRememberToken(std::string &&pRememberToken) noexcept
{
    rememberToken_ = std::make_shared<std::string>(std::move(pRememberToken));
    dirtyFlag_[17] = true;
}
void Users::setRememberTokenToNull() noexcept
{
    rememberToken_.reset();
    dirtyFlag_[17] = true;
}

const ::trantor::Date &Users::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Users::getCreatedAt() const noexcept
{
    return createdAt_;
}
void Users::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[18] = true;
}
void Users::setCreatedAtToNull() noexcept
{
    createdAt_.reset();
    dirtyFlag_[18] = true;
}

const ::trantor::Date &Users::getValueOfUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updatedAt_)
        return *updatedAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Users::getUpdatedAt() const noexcept
{
    return updatedAt_;
}
void Users::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    updatedAt_ = std::make_shared<::trantor::Date>(pUpdatedAt);
    dirtyFlag_[19] = true;
}
void Users::setUpdatedAtToNull() noexcept
{
    updatedAt_.reset();
    dirtyFlag_[19] = true;
}

void Users::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Users::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "level",
        "ownership_id",
        "role_id",
        "fullname",
        "username",
        "email",
        "password",
        "hardware_uuid",
        "computer_name",
        "activity",
        "status",
        "image",
        "expired",
        "created_date",
        "recent_login",
        "email_verified_at",
        "remember_token",
        "created_at",
        "updated_at"
    };
    return inCols;
}

void Users::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getLevel())
        {
            binder << getValueOfLevel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getOwnershipId())
        {
            binder << getValueOfOwnershipId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRoleId())
        {
            binder << getValueOfRoleId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFullname())
        {
            binder << getValueOfFullname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getUsername())
        {
            binder << getValueOfUsername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getPassword())
        {
            binder << getValueOfPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getHardwareUuid())
        {
            binder << getValueOfHardwareUuid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getComputerName())
        {
            binder << getValueOfComputerName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getActivity())
        {
            binder << getValueOfActivity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getImage())
        {
            binder << getValueOfImage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getExpired())
        {
            binder << getValueOfExpired();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getCreatedDate())
        {
            binder << getValueOfCreatedDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getRecentLogin())
        {
            binder << getValueOfRecentLogin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getEmailVerifiedAt())
        {
            binder << getValueOfEmailVerifiedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getRememberToken())
        {
            binder << getValueOfRememberToken();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Users::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    return ret;
}

void Users::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getLevel())
        {
            binder << getValueOfLevel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getOwnershipId())
        {
            binder << getValueOfOwnershipId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getRoleId())
        {
            binder << getValueOfRoleId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFullname())
        {
            binder << getValueOfFullname();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getUsername())
        {
            binder << getValueOfUsername();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getPassword())
        {
            binder << getValueOfPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getHardwareUuid())
        {
            binder << getValueOfHardwareUuid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getComputerName())
        {
            binder << getValueOfComputerName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getActivity())
        {
            binder << getValueOfActivity();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getImage())
        {
            binder << getValueOfImage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getExpired())
        {
            binder << getValueOfExpired();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getCreatedDate())
        {
            binder << getValueOfCreatedDate();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getRecentLogin())
        {
            binder << getValueOfRecentLogin();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getEmailVerifiedAt())
        {
            binder << getValueOfEmailVerifiedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getRememberToken())
        {
            binder << getValueOfRememberToken();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Users::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getLevel())
    {
        ret["level"]=(Json::UInt64)getValueOfLevel();
    }
    else
    {
        ret["level"]=Json::Value();
    }
    if(getOwnershipId())
    {
        ret["ownership_id"]=(Json::UInt64)getValueOfOwnershipId();
    }
    else
    {
        ret["ownership_id"]=Json::Value();
    }
    if(getRoleId())
    {
        ret["role_id"]=(Json::UInt64)getValueOfRoleId();
    }
    else
    {
        ret["role_id"]=Json::Value();
    }
    if(getFullname())
    {
        ret["fullname"]=getValueOfFullname();
    }
    else
    {
        ret["fullname"]=Json::Value();
    }
    if(getUsername())
    {
        ret["username"]=getValueOfUsername();
    }
    else
    {
        ret["username"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=getValueOfEmail();
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getPassword())
    {
        ret["password"]=getValueOfPassword();
    }
    else
    {
        ret["password"]=Json::Value();
    }
    if(getHardwareUuid())
    {
        ret["hardware_uuid"]=getValueOfHardwareUuid();
    }
    else
    {
        ret["hardware_uuid"]=Json::Value();
    }
    if(getComputerName())
    {
        ret["computer_name"]=getValueOfComputerName();
    }
    else
    {
        ret["computer_name"]=Json::Value();
    }
    if(getActivity())
    {
        ret["activity"]=getValueOfActivity();
    }
    else
    {
        ret["activity"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getImage())
    {
        ret["image"]=getValueOfImage();
    }
    else
    {
        ret["image"]=Json::Value();
    }
    if(getExpired())
    {
        ret["expired"]=getExpired()->toDbStringLocal();
    }
    else
    {
        ret["expired"]=Json::Value();
    }
    if(getCreatedDate())
    {
        ret["created_date"]=getCreatedDate()->toDbStringLocal();
    }
    else
    {
        ret["created_date"]=Json::Value();
    }
    if(getRecentLogin())
    {
        ret["recent_login"]=getRecentLogin()->toDbStringLocal();
    }
    else
    {
        ret["recent_login"]=Json::Value();
    }
    if(getEmailVerifiedAt())
    {
        ret["email_verified_at"]=getEmailVerifiedAt()->toDbStringLocal();
    }
    else
    {
        ret["email_verified_at"]=Json::Value();
    }
    if(getRememberToken())
    {
        ret["remember_token"]=getValueOfRememberToken();
    }
    else
    {
        ret["remember_token"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    return ret;
}

Json::Value Users::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 20)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getLevel())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfLevel();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getOwnershipId())
            {
                ret[pMasqueradingVector[2]]=(Json::UInt64)getValueOfOwnershipId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getRoleId())
            {
                ret[pMasqueradingVector[3]]=(Json::UInt64)getValueOfRoleId();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getFullname())
            {
                ret[pMasqueradingVector[4]]=getValueOfFullname();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getUsername())
            {
                ret[pMasqueradingVector[5]]=getValueOfUsername();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getEmail())
            {
                ret[pMasqueradingVector[6]]=getValueOfEmail();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getPassword())
            {
                ret[pMasqueradingVector[7]]=getValueOfPassword();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getHardwareUuid())
            {
                ret[pMasqueradingVector[8]]=getValueOfHardwareUuid();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getComputerName())
            {
                ret[pMasqueradingVector[9]]=getValueOfComputerName();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getActivity())
            {
                ret[pMasqueradingVector[10]]=getValueOfActivity();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getStatus())
            {
                ret[pMasqueradingVector[11]]=getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getImage())
            {
                ret[pMasqueradingVector[12]]=getValueOfImage();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getExpired())
            {
                ret[pMasqueradingVector[13]]=getExpired()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getCreatedDate())
            {
                ret[pMasqueradingVector[14]]=getCreatedDate()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getRecentLogin())
            {
                ret[pMasqueradingVector[15]]=getRecentLogin()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getEmailVerifiedAt())
            {
                ret[pMasqueradingVector[16]]=getEmailVerifiedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getRememberToken())
            {
                ret[pMasqueradingVector[17]]=getValueOfRememberToken();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[18]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getUpdatedAt())
            {
                ret[pMasqueradingVector[19]]=getUpdatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getLevel())
    {
        ret["level"]=(Json::UInt64)getValueOfLevel();
    }
    else
    {
        ret["level"]=Json::Value();
    }
    if(getOwnershipId())
    {
        ret["ownership_id"]=(Json::UInt64)getValueOfOwnershipId();
    }
    else
    {
        ret["ownership_id"]=Json::Value();
    }
    if(getRoleId())
    {
        ret["role_id"]=(Json::UInt64)getValueOfRoleId();
    }
    else
    {
        ret["role_id"]=Json::Value();
    }
    if(getFullname())
    {
        ret["fullname"]=getValueOfFullname();
    }
    else
    {
        ret["fullname"]=Json::Value();
    }
    if(getUsername())
    {
        ret["username"]=getValueOfUsername();
    }
    else
    {
        ret["username"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=getValueOfEmail();
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getPassword())
    {
        ret["password"]=getValueOfPassword();
    }
    else
    {
        ret["password"]=Json::Value();
    }
    if(getHardwareUuid())
    {
        ret["hardware_uuid"]=getValueOfHardwareUuid();
    }
    else
    {
        ret["hardware_uuid"]=Json::Value();
    }
    if(getComputerName())
    {
        ret["computer_name"]=getValueOfComputerName();
    }
    else
    {
        ret["computer_name"]=Json::Value();
    }
    if(getActivity())
    {
        ret["activity"]=getValueOfActivity();
    }
    else
    {
        ret["activity"]=Json::Value();
    }
    if(getStatus())
    {
        ret["status"]=getValueOfStatus();
    }
    else
    {
        ret["status"]=Json::Value();
    }
    if(getImage())
    {
        ret["image"]=getValueOfImage();
    }
    else
    {
        ret["image"]=Json::Value();
    }
    if(getExpired())
    {
        ret["expired"]=getExpired()->toDbStringLocal();
    }
    else
    {
        ret["expired"]=Json::Value();
    }
    if(getCreatedDate())
    {
        ret["created_date"]=getCreatedDate()->toDbStringLocal();
    }
    else
    {
        ret["created_date"]=Json::Value();
    }
    if(getRecentLogin())
    {
        ret["recent_login"]=getRecentLogin()->toDbStringLocal();
    }
    else
    {
        ret["recent_login"]=Json::Value();
    }
    if(getEmailVerifiedAt())
    {
        ret["email_verified_at"]=getEmailVerifiedAt()->toDbStringLocal();
    }
    else
    {
        ret["email_verified_at"]=Json::Value();
    }
    if(getRememberToken())
    {
        ret["remember_token"]=getValueOfRememberToken();
    }
    else
    {
        ret["remember_token"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    return ret;
}

bool Users::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("level"))
    {
        if(!validJsonOfField(1, "level", pJson["level"], err, true))
            return false;
    }
    if(pJson.isMember("ownership_id"))
    {
        if(!validJsonOfField(2, "ownership_id", pJson["ownership_id"], err, true))
            return false;
    }
    if(pJson.isMember("role_id"))
    {
        if(!validJsonOfField(3, "role_id", pJson["role_id"], err, true))
            return false;
    }
    if(pJson.isMember("fullname"))
    {
        if(!validJsonOfField(4, "fullname", pJson["fullname"], err, true))
            return false;
    }
    else
    {
        err="The fullname column cannot be null";
        return false;
    }
    if(pJson.isMember("username"))
    {
        if(!validJsonOfField(5, "username", pJson["username"], err, true))
            return false;
    }
    else
    {
        err="The username column cannot be null";
        return false;
    }
    if(pJson.isMember("email"))
    {
        if(!validJsonOfField(6, "email", pJson["email"], err, true))
            return false;
    }
    else
    {
        err="The email column cannot be null";
        return false;
    }
    if(pJson.isMember("password"))
    {
        if(!validJsonOfField(7, "password", pJson["password"], err, true))
            return false;
    }
    else
    {
        err="The password column cannot be null";
        return false;
    }
    if(pJson.isMember("hardware_uuid"))
    {
        if(!validJsonOfField(8, "hardware_uuid", pJson["hardware_uuid"], err, true))
            return false;
    }
    if(pJson.isMember("computer_name"))
    {
        if(!validJsonOfField(9, "computer_name", pJson["computer_name"], err, true))
            return false;
    }
    if(pJson.isMember("activity"))
    {
        if(!validJsonOfField(10, "activity", pJson["activity"], err, true))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(11, "status", pJson["status"], err, true))
            return false;
    }
    if(pJson.isMember("image"))
    {
        if(!validJsonOfField(12, "image", pJson["image"], err, true))
            return false;
    }
    if(pJson.isMember("expired"))
    {
        if(!validJsonOfField(13, "expired", pJson["expired"], err, true))
            return false;
    }
    if(pJson.isMember("created_date"))
    {
        if(!validJsonOfField(14, "created_date", pJson["created_date"], err, true))
            return false;
    }
    if(pJson.isMember("recent_login"))
    {
        if(!validJsonOfField(15, "recent_login", pJson["recent_login"], err, true))
            return false;
    }
    if(pJson.isMember("email_verified_at"))
    {
        if(!validJsonOfField(16, "email_verified_at", pJson["email_verified_at"], err, true))
            return false;
    }
    if(pJson.isMember("remember_token"))
    {
        if(!validJsonOfField(17, "remember_token", pJson["remember_token"], err, true))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(18, "created_at", pJson["created_at"], err, true))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(19, "updated_at", pJson["updated_at"], err, true))
            return false;
    }
    return true;
}
bool Users::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 20)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[15].empty())
      {
          if(pJson.isMember(pMasqueradingVector[15]))
          {
              if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[16].empty())
      {
          if(pJson.isMember(pMasqueradingVector[16]))
          {
              if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[17].empty())
      {
          if(pJson.isMember(pMasqueradingVector[17]))
          {
              if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[18].empty())
      {
          if(pJson.isMember(pMasqueradingVector[18]))
          {
              if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[19].empty())
      {
          if(pJson.isMember(pMasqueradingVector[19]))
          {
              if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Users::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("level"))
    {
        if(!validJsonOfField(1, "level", pJson["level"], err, false))
            return false;
    }
    if(pJson.isMember("ownership_id"))
    {
        if(!validJsonOfField(2, "ownership_id", pJson["ownership_id"], err, false))
            return false;
    }
    if(pJson.isMember("role_id"))
    {
        if(!validJsonOfField(3, "role_id", pJson["role_id"], err, false))
            return false;
    }
    if(pJson.isMember("fullname"))
    {
        if(!validJsonOfField(4, "fullname", pJson["fullname"], err, false))
            return false;
    }
    if(pJson.isMember("username"))
    {
        if(!validJsonOfField(5, "username", pJson["username"], err, false))
            return false;
    }
    if(pJson.isMember("email"))
    {
        if(!validJsonOfField(6, "email", pJson["email"], err, false))
            return false;
    }
    if(pJson.isMember("password"))
    {
        if(!validJsonOfField(7, "password", pJson["password"], err, false))
            return false;
    }
    if(pJson.isMember("hardware_uuid"))
    {
        if(!validJsonOfField(8, "hardware_uuid", pJson["hardware_uuid"], err, false))
            return false;
    }
    if(pJson.isMember("computer_name"))
    {
        if(!validJsonOfField(9, "computer_name", pJson["computer_name"], err, false))
            return false;
    }
    if(pJson.isMember("activity"))
    {
        if(!validJsonOfField(10, "activity", pJson["activity"], err, false))
            return false;
    }
    if(pJson.isMember("status"))
    {
        if(!validJsonOfField(11, "status", pJson["status"], err, false))
            return false;
    }
    if(pJson.isMember("image"))
    {
        if(!validJsonOfField(12, "image", pJson["image"], err, false))
            return false;
    }
    if(pJson.isMember("expired"))
    {
        if(!validJsonOfField(13, "expired", pJson["expired"], err, false))
            return false;
    }
    if(pJson.isMember("created_date"))
    {
        if(!validJsonOfField(14, "created_date", pJson["created_date"], err, false))
            return false;
    }
    if(pJson.isMember("recent_login"))
    {
        if(!validJsonOfField(15, "recent_login", pJson["recent_login"], err, false))
            return false;
    }
    if(pJson.isMember("email_verified_at"))
    {
        if(!validJsonOfField(16, "email_verified_at", pJson["email_verified_at"], err, false))
            return false;
    }
    if(pJson.isMember("remember_token"))
    {
        if(!validJsonOfField(17, "remember_token", pJson["remember_token"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(18, "created_at", pJson["created_at"], err, false))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(19, "updated_at", pJson["updated_at"], err, false))
            return false;
    }
    return true;
}
bool Users::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 20)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
      if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
      {
          if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
              return false;
      }
      if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
      {
          if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
              return false;
      }
      if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
      {
          if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
              return false;
      }
      if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
      {
          if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
              return false;
      }
      if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
      {
          if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Users::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson,
                             std::string &err,
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 17:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 18:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 19:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Roles Users::getRoles(const drogon::orm::DbClientPtr &clientPtr) const {
    std::shared_ptr<std::promise<Roles>> pro(new std::promise<Roles>);
    std::future<Roles> f = pro->get_future();
    getRoles(clientPtr, [&pro] (Roles result) {
        try {
            pro->set_value(result);
        }
        catch (...) {
            pro->set_exception(std::current_exception());
        }
    }, [&pro] (const DrogonDbException &err) {
        pro->set_exception(std::make_exception_ptr(err));
    });
    return f.get();
}
void Users::getRoles(const DbClientPtr &clientPtr,
                     const std::function<void(Roles)> &rcb,
                     const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from roles where id = ?";
    *clientPtr << sql
               << *roleId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Roles(r[0]));
                    }
               }
               >> ecb;
}
std::vector<Activities> Users::getActivities(const drogon::orm::DbClientPtr &clientPtr) const {
    std::shared_ptr<std::promise<std::vector<Activities>>> pro(new std::promise<std::vector<Activities>>);
    std::future<std::vector<Activities>> f = pro->get_future();
    getActivities(clientPtr, [&pro] (std::vector<Activities> result) {
        try {
            pro->set_value(result);
        }
        catch (...) {
            pro->set_exception(std::current_exception());
        }
    }, [&pro] (const DrogonDbException &err) {
        pro->set_exception(std::make_exception_ptr(err));
    });
    return f.get();
}
void Users::getActivities(const DbClientPtr &clientPtr,
                          const std::function<void(std::vector<Activities>)> &rcb,
                          const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from activities where user_id = ?";
    *clientPtr << sql
               << *id_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Activities> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Activities(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
