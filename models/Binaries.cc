/**
 *
 *  Binaries.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Binaries.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::remote_binary;

const std::string Binaries::Cols::_id = "id";
const std::string Binaries::Cols::_game = "game";
const std::string Binaries::Cols::_code = "code";
const std::string Binaries::Cols::_file = "file";
const std::string Binaries::Cols::_target = "target";
const std::string Binaries::Cols::_version = "version";
const std::string Binaries::Cols::_version_machine = "version_machine";
const std::string Binaries::Cols::_ownership_id = "ownership_id";
const std::string Binaries::Cols::_supported = "supported";
const std::string Binaries::Cols::_valid = "valid";
const std::string Binaries::Cols::_created_at = "created_at";
const std::string Binaries::Cols::_updated_at = "updated_at";
const std::string Binaries::primaryKeyName = "id";
const bool Binaries::hasPrimaryKey = true;
const std::string Binaries::tableName = "binaries";

const std::vector<typename Binaries::MetaData> Binaries::metaData_={
{"id","uint64_t","bigint(20) unsigned",8,1,1,1},
{"game","std::string","varchar(255)",255,0,0,1},
{"code","uint32_t","int(10) unsigned",4,0,0,0},
{"file","std::string","varchar(255)",255,0,0,1},
{"target","std::string","varchar(255)",255,0,0,1},
{"version","std::string","varchar(255)",255,0,0,1},
{"version_machine","int32_t","int(11)",4,0,0,1},
{"ownership_id","uint64_t","bigint(20) unsigned",8,0,0,1},
{"supported","int8_t","tinyint(1)",1,0,0,1},
{"valid","int8_t","tinyint(1)",1,0,0,1},
{"created_at","::trantor::Date","timestamp",0,0,0,0},
{"updated_at","::trantor::Date","timestamp",0,0,0,0}
};
const std::string &Binaries::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Binaries::Binaries(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["game"].isNull())
        {
            game_=std::make_shared<std::string>(r["game"].as<std::string>());
        }
        if(!r["code"].isNull())
        {
            code_=std::make_shared<uint32_t>(r["code"].as<uint32_t>());
        }
        if(!r["file"].isNull())
        {
            file_=std::make_shared<std::string>(r["file"].as<std::string>());
        }
        if(!r["target"].isNull())
        {
            target_=std::make_shared<std::string>(r["target"].as<std::string>());
        }
        if(!r["version"].isNull())
        {
            version_=std::make_shared<std::string>(r["version"].as<std::string>());
        }
        if(!r["version_machine"].isNull())
        {
            versionMachine_=std::make_shared<int32_t>(r["version_machine"].as<int32_t>());
        }
        if(!r["ownership_id"].isNull())
        {
            ownershipId_=std::make_shared<uint64_t>(r["ownership_id"].as<uint64_t>());
        }
        if(!r["supported"].isNull())
        {
            supported_=std::make_shared<int8_t>(r["supported"].as<int8_t>());
        }
        if(!r["valid"].isNull())
        {
            valid_=std::make_shared<int8_t>(r["valid"].as<int8_t>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 12 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            game_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            code_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            file_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            target_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            version_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            versionMachine_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            ownershipId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            supported_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            valid_=std::make_shared<int8_t>(r[index].as<int8_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

Binaries::Binaries(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            game_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            code_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            file_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            target_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            version_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            versionMachine_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            ownershipId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[7]].asUInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            supported_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            valid_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

Binaries::Binaries(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("game"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["game"].isNull())
        {
            game_=std::make_shared<std::string>(pJson["game"].asString());
        }
    }
    if(pJson.isMember("code"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["code"].isNull())
        {
            code_=std::make_shared<uint32_t>((uint32_t)pJson["code"].asUInt64());
        }
    }
    if(pJson.isMember("file"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["file"].isNull())
        {
            file_=std::make_shared<std::string>(pJson["file"].asString());
        }
    }
    if(pJson.isMember("target"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["target"].isNull())
        {
            target_=std::make_shared<std::string>(pJson["target"].asString());
        }
    }
    if(pJson.isMember("version"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["version"].isNull())
        {
            version_=std::make_shared<std::string>(pJson["version"].asString());
        }
    }
    if(pJson.isMember("version_machine"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["version_machine"].isNull())
        {
            versionMachine_=std::make_shared<int32_t>((int32_t)pJson["version_machine"].asInt64());
        }
    }
    if(pJson.isMember("ownership_id"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["ownership_id"].isNull())
        {
            ownershipId_=std::make_shared<uint64_t>((uint64_t)pJson["ownership_id"].asUInt64());
        }
    }
    if(pJson.isMember("supported"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["supported"].isNull())
        {
            supported_=std::make_shared<int8_t>((int8_t)pJson["supported"].asInt64());
        }
    }
    if(pJson.isMember("valid"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["valid"].isNull())
        {
            valid_=std::make_shared<int8_t>((int8_t)pJson["valid"].asInt64());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updated_at"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Binaries::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 12)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            game_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            code_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            file_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            target_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            version_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            versionMachine_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[6]].asInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            ownershipId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[7]].asUInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            supported_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[8]].asInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            valid_=std::make_shared<int8_t>((int8_t)pJson[pMasqueradingVector[9]].asInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[10]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[11]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Binaries::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("game"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["game"].isNull())
        {
            game_=std::make_shared<std::string>(pJson["game"].asString());
        }
    }
    if(pJson.isMember("code"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["code"].isNull())
        {
            code_=std::make_shared<uint32_t>((uint32_t)pJson["code"].asUInt64());
        }
    }
    if(pJson.isMember("file"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["file"].isNull())
        {
            file_=std::make_shared<std::string>(pJson["file"].asString());
        }
    }
    if(pJson.isMember("target"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["target"].isNull())
        {
            target_=std::make_shared<std::string>(pJson["target"].asString());
        }
    }
    if(pJson.isMember("version"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["version"].isNull())
        {
            version_=std::make_shared<std::string>(pJson["version"].asString());
        }
    }
    if(pJson.isMember("version_machine"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["version_machine"].isNull())
        {
            versionMachine_=std::make_shared<int32_t>((int32_t)pJson["version_machine"].asInt64());
        }
    }
    if(pJson.isMember("ownership_id"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["ownership_id"].isNull())
        {
            ownershipId_=std::make_shared<uint64_t>((uint64_t)pJson["ownership_id"].asUInt64());
        }
    }
    if(pJson.isMember("supported"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["supported"].isNull())
        {
            supported_=std::make_shared<int8_t>((int8_t)pJson["supported"].asInt64());
        }
    }
    if(pJson.isMember("valid"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["valid"].isNull())
        {
            valid_=std::make_shared<int8_t>((int8_t)pJson["valid"].asInt64());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("updated_at"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const uint64_t &Binaries::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Binaries::getId() const noexcept
{
    return id_;
}
void Binaries::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Binaries::PrimaryKeyType & Binaries::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Binaries::getValueOfGame() const noexcept
{
    const static std::string defaultValue = std::string();
    if(game_)
        return *game_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Binaries::getGame() const noexcept
{
    return game_;
}
void Binaries::setGame(const std::string &pGame) noexcept
{
    game_ = std::make_shared<std::string>(pGame);
    dirtyFlag_[1] = true;
}
void Binaries::setGame(std::string &&pGame) noexcept
{
    game_ = std::make_shared<std::string>(std::move(pGame));
    dirtyFlag_[1] = true;
}

const uint32_t &Binaries::getValueOfCode() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(code_)
        return *code_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Binaries::getCode() const noexcept
{
    return code_;
}
void Binaries::setCode(const uint32_t &pCode) noexcept
{
    code_ = std::make_shared<uint32_t>(pCode);
    dirtyFlag_[2] = true;
}
void Binaries::setCodeToNull() noexcept
{
    code_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Binaries::getValueOfFile() const noexcept
{
    const static std::string defaultValue = std::string();
    if(file_)
        return *file_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Binaries::getFile() const noexcept
{
    return file_;
}
void Binaries::setFile(const std::string &pFile) noexcept
{
    file_ = std::make_shared<std::string>(pFile);
    dirtyFlag_[3] = true;
}
void Binaries::setFile(std::string &&pFile) noexcept
{
    file_ = std::make_shared<std::string>(std::move(pFile));
    dirtyFlag_[3] = true;
}

const std::string &Binaries::getValueOfTarget() const noexcept
{
    const static std::string defaultValue = std::string();
    if(target_)
        return *target_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Binaries::getTarget() const noexcept
{
    return target_;
}
void Binaries::setTarget(const std::string &pTarget) noexcept
{
    target_ = std::make_shared<std::string>(pTarget);
    dirtyFlag_[4] = true;
}
void Binaries::setTarget(std::string &&pTarget) noexcept
{
    target_ = std::make_shared<std::string>(std::move(pTarget));
    dirtyFlag_[4] = true;
}

const std::string &Binaries::getValueOfVersion() const noexcept
{
    const static std::string defaultValue = std::string();
    if(version_)
        return *version_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Binaries::getVersion() const noexcept
{
    return version_;
}
void Binaries::setVersion(const std::string &pVersion) noexcept
{
    version_ = std::make_shared<std::string>(pVersion);
    dirtyFlag_[5] = true;
}
void Binaries::setVersion(std::string &&pVersion) noexcept
{
    version_ = std::make_shared<std::string>(std::move(pVersion));
    dirtyFlag_[5] = true;
}

const int32_t &Binaries::getValueOfVersionMachine() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(versionMachine_)
        return *versionMachine_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Binaries::getVersionMachine() const noexcept
{
    return versionMachine_;
}
void Binaries::setVersionMachine(const int32_t &pVersionMachine) noexcept
{
    versionMachine_ = std::make_shared<int32_t>(pVersionMachine);
    dirtyFlag_[6] = true;
}

const uint64_t &Binaries::getValueOfOwnershipId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(ownershipId_)
        return *ownershipId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Binaries::getOwnershipId() const noexcept
{
    return ownershipId_;
}
void Binaries::setOwnershipId(const uint64_t &pOwnershipId) noexcept
{
    ownershipId_ = std::make_shared<uint64_t>(pOwnershipId);
    dirtyFlag_[7] = true;
}

const int8_t &Binaries::getValueOfSupported() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(supported_)
        return *supported_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Binaries::getSupported() const noexcept
{
    return supported_;
}
void Binaries::setSupported(const int8_t &pSupported) noexcept
{
    supported_ = std::make_shared<int8_t>(pSupported);
    dirtyFlag_[8] = true;
}

const int8_t &Binaries::getValueOfValid() const noexcept
{
    const static int8_t defaultValue = int8_t();
    if(valid_)
        return *valid_;
    return defaultValue;
}
const std::shared_ptr<int8_t> &Binaries::getValid() const noexcept
{
    return valid_;
}
void Binaries::setValid(const int8_t &pValid) noexcept
{
    valid_ = std::make_shared<int8_t>(pValid);
    dirtyFlag_[9] = true;
}

const ::trantor::Date &Binaries::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Binaries::getCreatedAt() const noexcept
{
    return createdAt_;
}
void Binaries::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[10] = true;
}
void Binaries::setCreatedAtToNull() noexcept
{
    createdAt_.reset();
    dirtyFlag_[10] = true;
}

const ::trantor::Date &Binaries::getValueOfUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if(updatedAt_)
        return *updatedAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Binaries::getUpdatedAt() const noexcept
{
    return updatedAt_;
}
void Binaries::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    updatedAt_ = std::make_shared<::trantor::Date>(pUpdatedAt);
    dirtyFlag_[11] = true;
}
void Binaries::setUpdatedAtToNull() noexcept
{
    updatedAt_.reset();
    dirtyFlag_[11] = true;
}

void Binaries::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Binaries::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "game",
        "code",
        "file",
        "target",
        "version",
        "version_machine",
        "ownership_id",
        "supported",
        "valid",
        "created_at",
        "updated_at"
    };
    return inCols;
}

void Binaries::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getGame())
        {
            binder << getValueOfGame();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCode())
        {
            binder << getValueOfCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getFile())
        {
            binder << getValueOfFile();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getTarget())
        {
            binder << getValueOfTarget();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getVersion())
        {
            binder << getValueOfVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getVersionMachine())
        {
            binder << getValueOfVersionMachine();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getOwnershipId())
        {
            binder << getValueOfOwnershipId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getSupported())
        {
            binder << getValueOfSupported();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getValid())
        {
            binder << getValueOfValid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Binaries::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    return ret;
}

void Binaries::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getGame())
        {
            binder << getValueOfGame();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getCode())
        {
            binder << getValueOfCode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getFile())
        {
            binder << getValueOfFile();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getTarget())
        {
            binder << getValueOfTarget();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getVersion())
        {
            binder << getValueOfVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getVersionMachine())
        {
            binder << getValueOfVersionMachine();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getOwnershipId())
        {
            binder << getValueOfOwnershipId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getSupported())
        {
            binder << getValueOfSupported();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getValid())
        {
            binder << getValueOfValid();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Binaries::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getGame())
    {
        ret["game"]=getValueOfGame();
    }
    else
    {
        ret["game"]=Json::Value();
    }
    if(getCode())
    {
        ret["code"]=getValueOfCode();
    }
    else
    {
        ret["code"]=Json::Value();
    }
    if(getFile())
    {
        ret["file"]=getValueOfFile();
    }
    else
    {
        ret["file"]=Json::Value();
    }
    if(getTarget())
    {
        ret["target"]=getValueOfTarget();
    }
    else
    {
        ret["target"]=Json::Value();
    }
    if(getVersion())
    {
        ret["version"]=getValueOfVersion();
    }
    else
    {
        ret["version"]=Json::Value();
    }
    if(getVersionMachine())
    {
        ret["version_machine"]=getValueOfVersionMachine();
    }
    else
    {
        ret["version_machine"]=Json::Value();
    }
    if(getOwnershipId())
    {
        ret["ownership_id"]=(Json::UInt64)getValueOfOwnershipId();
    }
    else
    {
        ret["ownership_id"]=Json::Value();
    }
    if(getSupported())
    {
        ret["supported"]=getValueOfSupported();
    }
    else
    {
        ret["supported"]=Json::Value();
    }
    if(getValid())
    {
        ret["valid"]=getValueOfValid();
    }
    else
    {
        ret["valid"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    return ret;
}

Json::Value Binaries::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 12)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getGame())
            {
                ret[pMasqueradingVector[1]]=getValueOfGame();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getCode())
            {
                ret[pMasqueradingVector[2]]=getValueOfCode();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getFile())
            {
                ret[pMasqueradingVector[3]]=getValueOfFile();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getTarget())
            {
                ret[pMasqueradingVector[4]]=getValueOfTarget();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getVersion())
            {
                ret[pMasqueradingVector[5]]=getValueOfVersion();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getVersionMachine())
            {
                ret[pMasqueradingVector[6]]=getValueOfVersionMachine();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getOwnershipId())
            {
                ret[pMasqueradingVector[7]]=(Json::UInt64)getValueOfOwnershipId();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getSupported())
            {
                ret[pMasqueradingVector[8]]=getValueOfSupported();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getValid())
            {
                ret[pMasqueradingVector[9]]=getValueOfValid();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[10]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getUpdatedAt())
            {
                ret[pMasqueradingVector[11]]=getUpdatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getGame())
    {
        ret["game"]=getValueOfGame();
    }
    else
    {
        ret["game"]=Json::Value();
    }
    if(getCode())
    {
        ret["code"]=getValueOfCode();
    }
    else
    {
        ret["code"]=Json::Value();
    }
    if(getFile())
    {
        ret["file"]=getValueOfFile();
    }
    else
    {
        ret["file"]=Json::Value();
    }
    if(getTarget())
    {
        ret["target"]=getValueOfTarget();
    }
    else
    {
        ret["target"]=Json::Value();
    }
    if(getVersion())
    {
        ret["version"]=getValueOfVersion();
    }
    else
    {
        ret["version"]=Json::Value();
    }
    if(getVersionMachine())
    {
        ret["version_machine"]=getValueOfVersionMachine();
    }
    else
    {
        ret["version_machine"]=Json::Value();
    }
    if(getOwnershipId())
    {
        ret["ownership_id"]=(Json::UInt64)getValueOfOwnershipId();
    }
    else
    {
        ret["ownership_id"]=Json::Value();
    }
    if(getSupported())
    {
        ret["supported"]=getValueOfSupported();
    }
    else
    {
        ret["supported"]=Json::Value();
    }
    if(getValid())
    {
        ret["valid"]=getValueOfValid();
    }
    else
    {
        ret["valid"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getUpdatedAt())
    {
        ret["updated_at"]=getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"]=Json::Value();
    }
    return ret;
}

bool Binaries::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("game"))
    {
        if(!validJsonOfField(1, "game", pJson["game"], err, true))
            return false;
    }
    else
    {
        err="The game column cannot be null";
        return false;
    }
    if(pJson.isMember("code"))
    {
        if(!validJsonOfField(2, "code", pJson["code"], err, true))
            return false;
    }
    if(pJson.isMember("file"))
    {
        if(!validJsonOfField(3, "file", pJson["file"], err, true))
            return false;
    }
    else
    {
        err="The file column cannot be null";
        return false;
    }
    if(pJson.isMember("target"))
    {
        if(!validJsonOfField(4, "target", pJson["target"], err, true))
            return false;
    }
    else
    {
        err="The target column cannot be null";
        return false;
    }
    if(pJson.isMember("version"))
    {
        if(!validJsonOfField(5, "version", pJson["version"], err, true))
            return false;
    }
    else
    {
        err="The version column cannot be null";
        return false;
    }
    if(pJson.isMember("version_machine"))
    {
        if(!validJsonOfField(6, "version_machine", pJson["version_machine"], err, true))
            return false;
    }
    else
    {
        err="The version_machine column cannot be null";
        return false;
    }
    if(pJson.isMember("ownership_id"))
    {
        if(!validJsonOfField(7, "ownership_id", pJson["ownership_id"], err, true))
            return false;
    }
    if(pJson.isMember("supported"))
    {
        if(!validJsonOfField(8, "supported", pJson["supported"], err, true))
            return false;
    }
    else
    {
        err="The supported column cannot be null";
        return false;
    }
    if(pJson.isMember("valid"))
    {
        if(!validJsonOfField(9, "valid", pJson["valid"], err, true))
            return false;
    }
    else
    {
        err="The valid column cannot be null";
        return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(10, "created_at", pJson["created_at"], err, true))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(11, "updated_at", pJson["updated_at"], err, true))
            return false;
    }
    return true;
}
bool Binaries::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[8] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[9] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Binaries::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("game"))
    {
        if(!validJsonOfField(1, "game", pJson["game"], err, false))
            return false;
    }
    if(pJson.isMember("code"))
    {
        if(!validJsonOfField(2, "code", pJson["code"], err, false))
            return false;
    }
    if(pJson.isMember("file"))
    {
        if(!validJsonOfField(3, "file", pJson["file"], err, false))
            return false;
    }
    if(pJson.isMember("target"))
    {
        if(!validJsonOfField(4, "target", pJson["target"], err, false))
            return false;
    }
    if(pJson.isMember("version"))
    {
        if(!validJsonOfField(5, "version", pJson["version"], err, false))
            return false;
    }
    if(pJson.isMember("version_machine"))
    {
        if(!validJsonOfField(6, "version_machine", pJson["version_machine"], err, false))
            return false;
    }
    if(pJson.isMember("ownership_id"))
    {
        if(!validJsonOfField(7, "ownership_id", pJson["ownership_id"], err, false))
            return false;
    }
    if(pJson.isMember("supported"))
    {
        if(!validJsonOfField(8, "supported", pJson["supported"], err, false))
            return false;
    }
    if(pJson.isMember("valid"))
    {
        if(!validJsonOfField(9, "valid", pJson["valid"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(10, "created_at", pJson["created_at"], err, false))
            return false;
    }
    if(pJson.isMember("updated_at"))
    {
        if(!validJsonOfField(11, "updated_at", pJson["updated_at"], err, false))
            return false;
    }
    return true;
}
bool Binaries::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 12)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Binaries::validJsonOfField(size_t index,
                                const std::string &fieldName,
                                const Json::Value &pJson,
                                std::string &err,
                                bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
